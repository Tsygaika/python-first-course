str = input('Введите строку: ')
_sum = int(input('Введите сумму: '))

a = str.split(',')

def n_index(i): #функция получения номера строки, в которой находится элемент, и индекса этого элемента в этой строке
    n=0 #номер строки
    index = i  #индекс элемента в строке
    while index-2**n>=0:
        index -=2**n
        n+=1
    return n, index

    
for i in range(0,len(a)):#меняем список а так, чтобы из пустых элементов ('') выходило по два пустых элемента
    if a[i]=='':
        n, index = n_index(i)

        _set = set( a[ i - index + 2**n : ])#создаем множество, которое содержит все элементы находящиеся ниже строки с номером n
        if len(_set) == 1 and '' in _set: #если в строке ниже располагаются только '', то данная строка - последняя в дереве
            a = a[:-2] #т.к. if выше сработает только тогда, когда под последней строкой появятся два '', то их нужно удалить
            break

        else:
            new_ind = 2 **(n+1) - 1 + index*2  #индекс в списке a для первого из двух пустых элементов, которые будут добавлены в следующую строку
            a.insert(new_ind, '') #добавляем в следующую строку два элемента '' 
            a.insert(new_ind + 1, '')


num = 0 #определяем количество кол-во строк дереве
_len = len(a)
while _len - 2**num > 0:
    _len -= 2**num
    num+=1


flag=0
for k in range(num,0,-1):#перебираем все строки
    
    str_ = a[ 2**k-1 : 2**(k+1)-1 ] #создание строки, в которой находятся все элементы бинарного дерева, находящиеся на уровне k

    for i in range(0, len(str_)): #и в каждой строке перебираем все элементы: ищем непустые элементы из последней строки или непустые элементы из других строк, у которых два пустых потомка

        next_ind = 2**(k + 1) - 1 + i * 2  #номер левого потомка для данного элемента
        if (str_[i] != '') and ( (k == num) or ( (k < num) and (a[next_ind] == '') and (a[next_ind+1] == '') ) ):

            n, index = n_index(2**k - 1 + i)#определяем номер строки и индекс найденого элемента
            way=[]
            
            for j in range(n,-1,-1):#движемся к корню, по пути добавляя элементы
                ellem = a[2**n - 1 + index]
                way.append( int(ellem) )
                n -= 1
                index = index // 2
                
            if sum(way) == _sum: #если сумма всех элементов спика way равна введенной сумме, то выводим путь
                flag = 1 
                way.reverse()
                for t in range(0, len(way)):
                    print(way[t], end='')
                    if t != len(way)-1:
                        print('->',end='')
                print()

if flag==0:
    print('Таких путей нет')
